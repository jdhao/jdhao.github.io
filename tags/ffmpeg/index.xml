<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ffmpeg on Blowfish</title><link>https://jdhao.github.io/tags/ffmpeg/</link><description>Recent content in Ffmpeg on Blowfish</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2017 - 2024 ❤️ jdhao</copyright><lastBuildDate>Fri, 11 Feb 2022 20:48:46 +0800</lastBuildDate><atom:link href="https://jdhao.github.io/tags/ffmpeg/index.xml" rel="self" type="application/rss+xml"/><item><title>Install pyav inside Ubuntu Docker</title><link>https://jdhao.github.io/2022/02/11/pyav_install_docker/</link><pubDate>Fri, 11 Feb 2022 20:48:46 +0800</pubDate><guid>https://jdhao.github.io/2022/02/11/pyav_install_docker/</guid><description>&lt;p>Building a usable Docker image with all the packages living peacefully is hard.
Here is how to install &lt;a href="https://github.com/PyAV-Org/PyAV" target="_blank">pyav&lt;/a> using Docker.&lt;/p></description></item><item><title>How to Extract Key Frames from A Video with FFmpeg</title><link>https://jdhao.github.io/2021/12/25/ffmpeg-extract-key-frame-video/</link><pubDate>Sat, 25 Dec 2021 17:58:47 +0800</pubDate><guid>https://jdhao.github.io/2021/12/25/ffmpeg-extract-key-frame-video/</guid><description>&lt;p>In order to get enough information from videos, we often need to extract video frames.
However, we do not want to extract every frame from a video due to:&lt;/p>
&lt;ul>
&lt;li>information redundancy in successive video frames.&lt;/li>
&lt;li>huge storage space needed by these video frames.&lt;/li>
&lt;/ul>
&lt;p>In this post, I want to share how to extract &lt;em>key&lt;/em> frames from video to reduce the storage,
but still capture enough information from a video.&lt;/p></description></item><item><title>Process video in a certain time range with FFmpeg?</title><link>https://jdhao.github.io/2021/12/16/ffmpeg-process-video-in-a-time-range/</link><pubDate>Thu, 16 Dec 2021 00:34:16 +0800</pubDate><guid>https://jdhao.github.io/2021/12/16/ffmpeg-process-video-in-a-time-range/</guid><description>&lt;p>When dealing with videos, we may want to process video in a specific time range,
for example, to only process video from 50 seconds to 70 seconds. How do we
specify the time range in ffmpeg?&lt;/p></description></item><item><title>Audio Processing Using FFmpeg</title><link>https://jdhao.github.io/2021/11/10/ffmpeg_audio_processing/</link><pubDate>Wed, 10 Nov 2021 00:24:09 +0800</pubDate><guid>https://jdhao.github.io/2021/11/10/ffmpeg_audio_processing/</guid><description>&lt;p>Collected tips on audio processing with FFmpeg.&lt;/p></description></item><item><title>PyAV for video processing</title><link>https://jdhao.github.io/2021/11/04/pyav-video-processing/</link><pubDate>Thu, 04 Nov 2021 22:17:51 +0800</pubDate><guid>https://jdhao.github.io/2021/11/04/pyav-video-processing/</guid><description>&lt;p>&lt;a href="https://www.ffmpeg.org/" target="_blank">ffmpeg&lt;/a> is an excellent tool for video processing.
However, using ffmpeg directly inside Python is not convenient enough.
Previously, I have been using &lt;a href="https://github.com/kkroening/ffmpeg-python" target="_blank">ffmpeg-python&lt;/a>, which is a thin wrapper around the &lt;code>ffmpeg&lt;/code> command line executable.&lt;/p></description></item><item><title>Notes on FFmpeg (1)</title><link>https://jdhao.github.io/2021/04/16/ffmpeg_notes_1/</link><pubDate>Fri, 16 Apr 2021 00:33:01 +0800</pubDate><guid>https://jdhao.github.io/2021/04/16/ffmpeg_notes_1/</guid><description>Install ffmpeg # If we have root rights, we can install FFmpeg via package manager. On CentOS 7, run the following command:
yum install epel-release yum localinstall --nogpgcheck https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm yum install ffmpeg ffmpeg-devel If you want to download binary releases, this site can help you. It has binary release for FFmpeg, ffprobe for different systems. It seems that the provided ffmpeg is statically linked, so all you need is that one file to get to work.</description></item></channel></rss>