<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugin on Blowfish</title><link>https://jdhao.github.io/tags/plugin/</link><description>Recent content in Plugin on Blowfish</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2017 - 2024 ❤️ jdhao</copyright><lastBuildDate>Sat, 02 Sep 2023 16:04:08 +0200</lastBuildDate><atom:link href="https://jdhao.github.io/tags/plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrating from Packer.nvim to Lazy.nvim</title><link>https://jdhao.github.io/2023/09/02/from_packer_to_lazy_nvim/</link><pubDate>Sat, 02 Sep 2023 16:04:08 +0200</pubDate><guid>https://jdhao.github.io/2023/09/02/from_packer_to_lazy_nvim/</guid><description>&lt;p>&lt;strong>TL;DR: Lazy.nvim is amazing. It is easy to switch and reduce your startup time immensely. Just try it!&lt;/strong>&lt;/p>
&lt;p>I think &lt;a href="https://github.com/wbthomason/packer.nvim" target="_blank">Packer.nvim&lt;/a> has been a revolutionary plugin manager after nvim 0.5.
It introduces a lot of lazy loading techniques to speed up the startup process of Neovim.&lt;/p></description></item><item><title>You Do Not Need a Plugin for This Feature</title><link>https://jdhao.github.io/2022/08/21/you-do-not-need-a-plugin-for-this/</link><pubDate>Sun, 21 Aug 2022 11:56:35 +0800</pubDate><guid>https://jdhao.github.io/2022/08/21/you-do-not-need-a-plugin-for-this/</guid><description>&lt;p>I saw from the repo awesome neovim&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> a plugin that helps the user create the intermediate dir when they save a file.
I wondered why this feature even needs a whole plugin?
You can literally do this with a few lines of code.&lt;/p></description></item><item><title>Migrating from vim-plug to Packer.nvim</title><link>https://jdhao.github.io/2021/07/11/from_vim_plug_to_packer/</link><pubDate>Sun, 11 Jul 2021 23:05:22 +0800</pubDate><guid>https://jdhao.github.io/2021/07/11/from_vim_plug_to_packer/</guid><description>&lt;details>
&lt;summary>&lt;font size="3" color="red">Update log&lt;/font>&lt;/summary>
&lt;ul>
&lt;li>&lt;font color="blue">2022-03-27: fix a typo in requiring lua modules&lt;/font>&lt;/li>
&lt;li>&lt;font color="blue">2022-02-08: change fastgit URL&lt;/font>&lt;/li>
&lt;li>&lt;font color="blue">2022-02-05: add new autocmd for auto-running command &lt;code>PackerCompile&lt;/code>.&lt;/font>&lt;/li>
&lt;/ul>
&lt;/details>
&lt;p>Over the past two years, I have been using &lt;a href="https://github.com/junegunn/vim-plug" target="_blank">vim-plug&lt;/a> as my plugin manager for Nvim.
Vim-plug is powerful, fast and amazing, especially considering that all its features are contained in a single vim script.
It uses the old way to manage plugins, i.e., it will manage the loading of plugins directly.&lt;/p></description></item><item><title>Introducing better-esacape.vim: My First Vim/Neovim Plugin</title><link>https://jdhao.github.io/2020/12/18/my_first_vim_plugin/</link><pubDate>Fri, 18 Dec 2020 23:22:20 +0800</pubDate><guid>https://jdhao.github.io/2020/12/18/my_first_vim_plugin/</guid><description>&lt;p>After using and learning Neovim for over 2 years, I have finally published my
first plugin &amp;ndash; better-escape.vim.&lt;/p></description></item><item><title>Replace Deoplete-jedi with LSP Finally</title><link>https://jdhao.github.io/2020/11/04/replace_deoplete_jedi_for_lsp/</link><pubDate>Wed, 04 Nov 2020 00:10:03 +0800</pubDate><guid>https://jdhao.github.io/2020/11/04/replace_deoplete_jedi_for_lsp/</guid><description>&lt;p>&lt;font color="red">Update 2021-07-15: Note that pyls has been deprecated. There is new fork of it called &lt;a href="https://github.com/python-lsp/python-lsp-server" target="_blank">pylsp&lt;/a>, which is maintained by the community.&lt;/font>&lt;/p>
&lt;p>After using deoplete along with deoplete-jedi for more than two years, I have
finally decided to try something new for code completion. Yeah, you guess it,
the &lt;a href="https://langserver.org/" target="_blank">Language Server Protocol&lt;/a> (LSP in short).&lt;/p></description></item><item><title>Grammar Check in Neovim with LanguageTool</title><link>https://jdhao.github.io/2020/09/20/nvim_grammar_check_languagetool/</link><pubDate>Sun, 20 Sep 2020 22:47:19 +0800</pubDate><guid>https://jdhao.github.io/2020/09/20/nvim_grammar_check_languagetool/</guid><description>&lt;p>As a Neovim user who writes frequently, I want to use Neovim to check my
grammar before posting it in my blog. In this post, I will compare several
plugins used for grammar checking. Under the hood, they all use the opensource
tool &lt;a href="https://languagetool.org/" target="_blank">languagetool&lt;/a>.&lt;/p></description></item><item><title>My Settings for the Fuzzy-finder LeaderF</title><link>https://jdhao.github.io/2020/08/26/leaderf_nvim_settings/</link><pubDate>Wed, 26 Aug 2020 23:24:20 +0800</pubDate><guid>https://jdhao.github.io/2020/08/26/leaderf_nvim_settings/</guid><description>&lt;p>&lt;a href="https://github.com/Yggdroot/LeaderF" target="_blank">LeaderF&lt;/a> is Vim/Neovim plugin to fuzzy-search files, colorschemes, tags etc. quickly.
It works across different platforms flawlessly.
Here are some of its settings to address minor issues.&lt;/p></description></item><item><title>Regex Keyword and Python Interpolation in Ultisnips</title><link>https://jdhao.github.io/2020/01/05/ultisnips_python_interpolation/</link><pubDate>Sun, 05 Jan 2020 18:52:03 +0800</pubDate><guid>https://jdhao.github.io/2020/01/05/ultisnips_python_interpolation/</guid><description>&lt;p>&lt;a href="">Vim-snippet&lt;/a> provides a lot of useful Ultisnips snippets for various
filetypes. For example, for Markdown, to insert level 1 header, the snippet
trigger is &lt;code>sec&lt;/code>, and for level 2 and 3 header, the triggers are &lt;code>ssec&lt;/code> and
&lt;code>sssec&lt;/code> respectively. These triggers are non-intuitive and hard to remember and
type.&lt;/p></description></item><item><title>Firenvim: Neovim inside Your Browser</title><link>https://jdhao.github.io/2020/01/01/firenvim_nvim_inside_browser/</link><pubDate>Wed, 01 Jan 2020 23:51:12 +0800</pubDate><guid>https://jdhao.github.io/2020/01/01/firenvim_nvim_inside_browser/</guid><description>&lt;p align="center">
&lt;img
src="https://blog-resource-1257868508.file.myqcloud.com/firenvim.gif">
&lt;/p>
&lt;details>
&lt;summary>&lt;font size="2" color="red">Update log&lt;/font>&lt;/summary>
&lt;p>&lt;font color="blue">2022-08-15: update firenvim conf; add install setting for packer.nvim &lt;/font>&lt;/p>
&lt;/details>
&lt;h1 class="relative group">Introduction
&lt;div id="introduction" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#introduction" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;p>Last year, I have written &lt;a href="https://jdhao.github.io/2019/05/11/nvim_text_input_browser/" target="_blank">a post&lt;/a> on how to edit texts inside the browser
using Vim/Nvim or browser extensions that have Vim emulations.
However, none of them is good enough, since they are either not convenient to use
or lacking features compared to real Neovim empowered by various plugins.&lt;/p></description></item><item><title>Creating Markdown Front Matter with Ultisnips</title><link>https://jdhao.github.io/2019/12/22/ultisnips_avoid_content_update/</link><pubDate>Sun, 22 Dec 2019 13:45:25 +0800</pubDate><guid>https://jdhao.github.io/2019/12/22/ultisnips_avoid_content_update/</guid><description>&lt;h1 class="relative group">Introduction
&lt;div id="introduction" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#introduction" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;p>Currently, I write my blog posts in Markdown and build the blog using
&lt;a href="https://gohugo.io/" target="_blank">Hugo&lt;/a>. Hugo supports &lt;a href="https://gohugo.io/content-management/front-matter/" target="_blank">front matter&lt;/a> for Markdown so that you can
attach metadata for a post, such as title, date, tags, categories, etc.&lt;/p></description></item><item><title>Nvim Autocompletion with Deoplete</title><link>https://jdhao.github.io/2019/06/06/nvim_deoplete_settings/</link><pubDate>Thu, 06 Jun 2019 16:40:51 +0800</pubDate><guid>https://jdhao.github.io/2019/06/06/nvim_deoplete_settings/</guid><description>&lt;p>&lt;strong>Note: this post is deprecated, I use &lt;a href="https://github.com/hrsh7th/nvim-cmp" target="_blank">nvim-cmp&lt;/a> for auto-completion now.&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://github.com/Shougo/deoplete.nvim" target="_blank">Deoplete&lt;/a> is a good auto-completion plugin for Neovim.
In this post, I introduce how to set up auto-completion for Nvim with the help of deoplete.&lt;/p></description></item><item><title>A Complete Guide on Writing LaTeX with Vimtex in Neovim</title><link>https://jdhao.github.io/2019/03/26/nvim_latex_write_preview/</link><pubDate>Tue, 26 Mar 2019 22:54:43 +0800</pubDate><guid>https://jdhao.github.io/2019/03/26/nvim_latex_write_preview/</guid><description>&lt;details>
&lt;summary>&lt;font size="2" color="red">Update log&lt;/font>&lt;/summary>
&lt;ul>
&lt;li>&lt;font color="blue">2021-02-20: Add inverse search settings on Windows and macOS&lt;/font>&lt;/li>
&lt;/ul>
&lt;/details>
&lt;p>Previously, I have written &lt;a href="https://jdhao.github.io/2018/03/10/sublime-text-latextools-setup/" target="_blank">a post&lt;/a>
on how to write and compile LaTeX source code in Sublime Text. Now that I am
familiar with Neovim, I want to do everything related to text editing inside
Neovim. In this post, I would like to share how to configure Neovim for LaTeX
editing and previewing.&lt;/p>
&lt;p>My complete config for vimtex can be found &lt;a href="https://github.com/jdhao/nvim-config/blob/master/core/plugins.vim" target="_blank">here&lt;/a> (search vimtex)
on my nvim-config repo .&lt;/p></description></item><item><title>A Complete Guide to Neovim Configuration for Python Development</title><link>https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/</link><pubDate>Mon, 24 Dec 2018 00:14:00 +0800</pubDate><guid>https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/Xnip2020-04-04_21-39-49.jpg" width="600">
&lt;/p>
&lt;details>
&lt;summary>&lt;font size="3" color="blue">Change log&lt;/font>&lt;/summary>
&lt;ul>
&lt;li>&lt;font color="blue">2022-01-29: Add deprecation notice&lt;/font>&lt;/li>
&lt;li>&lt;font color="blue">2021-01-17: Install nvim via tar ball instead of appimage&lt;/font>&lt;/li>
&lt;li>&lt;font color="blue">2020-12-01: Add detailed guide on installing Neovim on Linux&lt;/font>&lt;/li>
&lt;/ul>
&lt;/details>
&lt;p>TL;DR: My complete nvim configuration is &lt;a href="https://github.com/jdhao/nvim-config" target="_blank">here&lt;/a>. Follow the guide there on how to
use it. Most of the config below also applies to Windows and Mac. For how to
configure Neovim on Windows, you may also be interested in &lt;a href="https://jdhao.github.io/2018/11/15/neovim_configuration_windows/" target="_blank">this post&lt;/a>.&lt;/p>
&lt;p>&lt;strong>2022-01-29: Note that this post is written more than three years ago.
Some of the plugins mentioned here may not be maintained or may not be the best fit for Neovim, or even not needed,
e.g., &lt;a href="https://jdhao.github.io/2020/05/22/highlight_yank_region_nvim/#neovim-only" target="_blank">highlighted yank is builtin in Neovim since May 2020&lt;/a>.
I have shared some of the plugin changes in &lt;a href="https://jdhao.github.io/2021/12/31/using_nvim_after_three_years/#what-remains-what-has-changed-and-some-new-plugins" target="_blank">this post&lt;/a>.&lt;/strong>&lt;/p></description></item><item><title>Fzf Installation and Usage</title><link>https://jdhao.github.io/2018/11/05/fzf_install_use/</link><pubDate>Mon, 05 Nov 2018 23:54:29 +0800</pubDate><guid>https://jdhao.github.io/2018/11/05/fzf_install_use/</guid><description>&lt;script id="asciicast-218493" src="https://asciinema.org/a/218493.js" async>&lt;/script></description></item><item><title>How to Use Tagbar in Neovim</title><link>https://jdhao.github.io/2018/09/28/nvim_tagbar_install_use/</link><pubDate>Fri, 28 Sep 2018 12:17:03 +0800</pubDate><guid>https://jdhao.github.io/2018/09/28/nvim_tagbar_install_use/</guid><description>&lt;p>If you have a source file with hundreds or thousands of lines of code. How to
you see its structure and go to some classes or methods quickly in Nvim? The
solution is to use &lt;a href="https://github.com/majutsushi/tagbar" target="_blank">tagbar&lt;/a>.&lt;/p></description></item></channel></rss>