<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Blowfish</title><link>https://jdhao.github.io/categories/python/</link><description>Recent content in Python on Blowfish</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2017 - 2024 ❤️ jdhao</copyright><lastBuildDate>Fri, 26 Jul 2024 20:04:57 +0200</lastBuildDate><atom:link href="https://jdhao.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Speed up document indexing in Elasticsearch via bulk indexing</title><link>https://jdhao.github.io/2024/07/26/elasticsearch_bulk_indexing/</link><pubDate>Fri, 26 Jul 2024 20:04:57 +0200</pubDate><guid>https://jdhao.github.io/2024/07/26/elasticsearch_bulk_indexing/</guid><description>&lt;p>In Elasticsearch, there is &lt;a href="https://elasticsearch-py.readthedocs.io/en/v8.14.0/api/elasticsearch.html#elasticsearch.Elasticsearch.index" target="_blank">index API&lt;/a> where you can index a single document to an index.&lt;/p></description></item><item><title>Google Cloud Storage Usage</title><link>https://jdhao.github.io/2024/07/10/gcloud_storage_usage/</link><pubDate>Wed, 10 Jul 2024 22:42:29 +0200</pubDate><guid>https://jdhao.github.io/2024/07/10/gcloud_storage_usage/</guid><description>&lt;p>Some notes on using the &lt;a href="https://cloud.google.com/storage/docs/introduction#quickstarts" target="_blank">Google Cloud storage&lt;/a>.&lt;/p></description></item><item><title>Configure Python logging with dictConfig</title><link>https://jdhao.github.io/2024/03/11/python-logging-dictconfig/</link><pubDate>Mon, 11 Mar 2024 23:30:24 +0100</pubDate><guid>https://jdhao.github.io/2024/03/11/python-logging-dictconfig/</guid><description>&lt;p>Apart from directly configuring the Python logging in the code itself.
We can also configuring the logging using &lt;a href="https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig" target="_blank">fileConfig&lt;/a> or &lt;a href="https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig" target="_blank">dictConfig&lt;/a>.&lt;/p></description></item><item><title>Black Formatter Setup for Python Project</title><link>https://jdhao.github.io/2024/02/22/black_formatter_setup/</link><pubDate>Thu, 22 Feb 2024 22:55:02 +0100</pubDate><guid>https://jdhao.github.io/2024/02/22/black_formatter_setup/</guid><description>&lt;p>This post is about how to set up &lt;a href="https://github.com/psf/black" target="_blank">black&lt;/a>, the popular code formatter for Python projects.&lt;/p></description></item><item><title>Using Virutal Environment in Python with venv</title><link>https://jdhao.github.io/2023/10/11/python-use-venv/</link><pubDate>Wed, 11 Oct 2023 00:23:33 +0200</pubDate><guid>https://jdhao.github.io/2023/10/11/python-use-venv/</guid><description>&lt;p>Using a virtual environment for Project dev in Python is a good practice.
&lt;a href="https://docs.python.org/3/library/venv.html" target="_blank">venv&lt;/a> is module that is available since Python 3.3.
It can help us to manage the virtual environment in a simple way.&lt;/p></description></item><item><title>FastAPI testing and OpenAPI doc generation</title><link>https://jdhao.github.io/2023/09/20/fastapi-testing-and-openapi-spec/</link><pubDate>Wed, 20 Sep 2023 23:57:37 +0200</pubDate><guid>https://jdhao.github.io/2023/09/20/fastapi-testing-and-openapi-spec/</guid><description>&lt;p>Some notes on developing a web application with FastAPI.&lt;/p></description></item><item><title>How to Profile Your Python Script/Module</title><link>https://jdhao.github.io/2023/09/12/python_profiling_visualization/</link><pubDate>Tue, 12 Sep 2023 23:31:38 +0200</pubDate><guid>https://jdhao.github.io/2023/09/12/python_profiling_visualization/</guid><description>&lt;p>In my &lt;a href="https://jdhao.github.io/2020/11/06/profile_python_line_profiler/" target="_blank">previous post&lt;/a>, I shared how to profile a single function using line_profiler.
In this post, I want to share how to profile Python script/module and visualize the profile stat to pinpoint the slow part of the code.&lt;/p></description></item><item><title>How to Deploy Fastapi Application with Docker</title><link>https://jdhao.github.io/2023/08/01/fastapi-app-deployment-docker/</link><pubDate>Tue, 01 Aug 2023 23:02:09 +0200</pubDate><guid>https://jdhao.github.io/2023/08/01/fastapi-app-deployment-docker/</guid><description>&lt;p>In post, I want to summarize the complete steps to deploy a demo web service implemented with FastAPI in Docker container.&lt;/p></description></item><item><title>How to Parse Query Param With Multiple Values in FastAPI</title><link>https://jdhao.github.io/2023/07/13/fastapi-query-param-with-multiple-value/</link><pubDate>Thu, 13 Jul 2023 22:14:40 +0200</pubDate><guid>https://jdhao.github.io/2023/07/13/fastapi-query-param-with-multiple-value/</guid><description>&lt;p>In HTTP request, same query parameter with multiple values are allowed.
For example, for query parameter &lt;code>brand&lt;/code>, the query string looks like this: &lt;code>brand=foo&amp;amp;brand=bar&lt;/code>.
How to parse value of this parameter to a list in FastAPI?
There are several different ways.&lt;/p></description></item><item><title>Running/importing Python code/module in Databricks</title><link>https://jdhao.github.io/2023/06/06/databricks-run-import-code/</link><pubDate>Tue, 06 Jun 2023 21:37:45 +0200</pubDate><guid>https://jdhao.github.io/2023/06/06/databricks-run-import-code/</guid><description>&lt;p>Databricks is centered around notebooks for doing a lot of works.
As a result, it is often not obvious how to run or re-use code from another notebook or Python module.
In this post, I want to share how to do this in the Databricks.&lt;/p></description></item><item><title>How to Enable Method Autocompletion for OpenCV</title><link>https://jdhao.github.io/2022/11/16/auto_completion_opencv/</link><pubDate>Wed, 16 Nov 2022 20:05:11 +0800</pubDate><guid>https://jdhao.github.io/2022/11/16/auto_completion_opencv/</guid><description>&lt;h2 class="relative group">Introduction
&lt;div id="introduction" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#introduction" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>In Python, some packages are written mainly or partially in C++,
and the Python interfaces are just wrappers around the binary C++ module.
Among these packages, there is &lt;a href="https://github.com/opencv/opencv" target="_blank">OpenCV&lt;/a>.&lt;/p></description></item><item><title>Monitoring Service Stat with uwsgitop</title><link>https://jdhao.github.io/2022/08/01/uwsgi_service_stat_monitor/</link><pubDate>Mon, 01 Aug 2022 22:12:54 +0800</pubDate><guid>https://jdhao.github.io/2022/08/01/uwsgi_service_stat_monitor/</guid><description>&lt;p>When we serve a HTTP service via uWSGI, we can monitor its stats via &lt;a href="https://github.com/xrmx/uwsgitop#readme" target="_blank">&lt;code>uwsgitop&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>A Dive into super() in Python</title><link>https://jdhao.github.io/2022/07/31/super_in_python/</link><pubDate>Sun, 31 Jul 2022 23:23:45 +0800</pubDate><guid>https://jdhao.github.io/2022/07/31/super_in_python/</guid><description>&lt;p>In Python, we often see the use of &lt;a href="https://docs.python.org/3/library/functions.html#super" target="_blank">super()&lt;/a> in class initialization.&lt;/p></description></item><item><title>How to Pass List by Value as Parameter in Python</title><link>https://jdhao.github.io/2022/07/27/pass_list_by_value_python/</link><pubDate>Wed, 27 Jul 2022 01:35:30 +0800</pubDate><guid>https://jdhao.github.io/2022/07/27/pass_list_by_value_python/</guid><description>&lt;p>If we pass list as parameter to a function and change the parameter, the original list is also changed.
This is because list is a mutable type, when we pass list to a function, we are passing the same list.&lt;/p></description></item><item><title>What Happened When Logging without Handlers in Python</title><link>https://jdhao.github.io/2022/05/27/logging_without_handlers_python/</link><pubDate>Fri, 27 May 2022 23:27:12 +0800</pubDate><guid>https://jdhao.github.io/2022/05/27/logging_without_handlers_python/</guid><description>&lt;p>I saw a post from stackoverflow asking why his logger does not work as expect?
The code is like:&lt;/p></description></item><item><title>How To Read and Write ply File in Python</title><link>https://jdhao.github.io/2022/05/26/read_write_ply_file_python/</link><pubDate>Thu, 26 May 2022 13:26:11 +0800</pubDate><guid>https://jdhao.github.io/2022/05/26/read_write_ply_file_python/</guid><description>&lt;p>In this post, I want to share how to generate &lt;a href="https://en.wikipedia.org/wiki/PLY_%28file_format%29" target="_blank">ply files&lt;/a> in Python.&lt;/p></description></item><item><title>How to Add Color Emoji to Image in Python</title><link>https://jdhao.github.io/2022/04/03/add_color_emoji_to_image_in_python/</link><pubDate>Sun, 03 Apr 2022 11:52:55 +0800</pubDate><guid>https://jdhao.github.io/2022/04/03/add_color_emoji_to_image_in_python/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/202204031210116.png" width="500">
&lt;/p>
&lt;p>In this post, I would like to share how to add &lt;a href="https://en.wikipedia.org/wiki/Emoji" target="_blank">color emoji&lt;/a> to image with Python.&lt;/p></description></item><item><title>How to Do Image Alpha-compositing in Pillow</title><link>https://jdhao.github.io/2022/04/01/image_alpha_composite_pillow/</link><pubDate>Fri, 01 Apr 2022 23:40:04 +0800</pubDate><guid>https://jdhao.github.io/2022/04/01/image_alpha_composite_pillow/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/202204020034075.jpg" width="800">
&lt;/p>
&lt;h1 id="what-is-alpha-compositing">What is alpha-compositing&lt;/h1>
&lt;p>If you have two images A and B, you &lt;a
href="https://en.wikipedia.org/wiki/Alpha_compositing">alpha-composite&lt;/a>
A over B, it will create an effect that you can see both image A and B
in the resulting image, as if A has transparency and you can
&lt;em>see&lt;/em> through A and also see B.&lt;/p></description></item><item><title>Using STL Containers with pybind11</title><link>https://jdhao.github.io/2021/12/23/pybind11_stl_vector/</link><pubDate>Thu, 23 Dec 2021 23:21:38 +0800</pubDate><guid>https://jdhao.github.io/2021/12/23/pybind11_stl_vector/</guid><description>&lt;p>In my &lt;a href="https://jdhao.github.io/2021/08/17/pybind11_first_impression/" target="_blank">old post&lt;/a>, I have shared how to use &lt;a href="https://pybind11.readthedocs.io/" target="_blank">pybind11&lt;/a> to accelerate execution of Python code.&lt;/p></description></item><item><title>PyAV for video processing</title><link>https://jdhao.github.io/2021/11/04/pyav-video-processing/</link><pubDate>Thu, 04 Nov 2021 22:17:51 +0800</pubDate><guid>https://jdhao.github.io/2021/11/04/pyav-video-processing/</guid><description>&lt;p>&lt;a href="https://www.ffmpeg.org/" target="_blank">ffmpeg&lt;/a> is an excellent tool for video processing.
However, using ffmpeg directly inside Python is not convenient enough.
Previously, I have been using &lt;a href="https://github.com/kkroening/ffmpeg-python" target="_blank">ffmpeg-python&lt;/a>, which is a thin wrapper around the &lt;code>ffmpeg&lt;/code> command line executable.&lt;/p></description></item><item><title>Scheduling Your Tasks with Package Apscheduler</title><link>https://jdhao.github.io/2021/10/20/python_apsscheduler_intro/</link><pubDate>Wed, 20 Oct 2021 01:05:36 +0800</pubDate><guid>https://jdhao.github.io/2021/10/20/python_apsscheduler_intro/</guid><description>&lt;p>In Python, to run a task periodically, we can use the package &lt;a href="https://github.com/agronholm/apscheduler" target="_blank">apscheduler&lt;/a>.&lt;/p></description></item><item><title>Pybind11 hands on</title><link>https://jdhao.github.io/2021/08/17/pybind11_first_impression/</link><pubDate>Tue, 17 Aug 2021 00:24:37 +0800</pubDate><guid>https://jdhao.github.io/2021/08/17/pybind11_first_impression/</guid><description>&lt;p>To accelerate the execution of some performance critical code, we can write the
code in C++ with the help of &lt;a href="https://github.com/pybind/pybind11" target="_blank">pybind11&lt;/a> and
export the C++ code as shared library&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Then we can import the shared
library as a module and enjoy speed boost.&lt;/p></description></item><item><title>Delete Keys Matching A Pattern with py-redis-cluster</title><link>https://jdhao.github.io/2021/07/20/py_redis_cluster_delete_key_with_pattern/</link><pubDate>Tue, 20 Jul 2021 23:59:30 +0800</pubDate><guid>https://jdhao.github.io/2021/07/20/py_redis_cluster_delete_key_with_pattern/</guid><description>&lt;p>We have a Python web service where we store some &lt;code>key-val&lt;/code> pairs in redis.
Occasionally, I want to delete some of the keys matching a certain pattern.
Current, we are using &lt;a href="https://github.com/Grokzen/redis-py-cluster" target="_blank">redis-py-cluster&lt;/a> for redis-related operations.&lt;/p></description></item><item><title>Excel Processing using Pandas</title><link>https://jdhao.github.io/2021/06/11/pandas_read_write_excel/</link><pubDate>Fri, 11 Jun 2021 00:48:23 +0800</pubDate><guid>https://jdhao.github.io/2021/06/11/pandas_read_write_excel/</guid><description>&lt;p>A brief summary of how to read and write excel files using Pandas package.&lt;/p></description></item><item><title>Post Nested Data Structure to the Server Using Requests</title><link>https://jdhao.github.io/2021/04/08/send_complex_data_in_python_requests/</link><pubDate>Thu, 08 Apr 2021 23:54:08 +0800</pubDate><guid>https://jdhao.github.io/2021/04/08/send_complex_data_in_python_requests/</guid><description>&lt;p>In this post, I will share how to post complex data and decode it in the server
side in Python.&lt;/p></description></item><item><title>Why Are Some Logging Messages Missing in Python?</title><link>https://jdhao.github.io/2021/04/01/python_log_message_missing/</link><pubDate>Thu, 01 Apr 2021 23:10:56 +0800</pubDate><guid>https://jdhao.github.io/2021/04/01/python_log_message_missing/</guid><description>&lt;p>In my project, I use the &lt;a href="https://docs.python.org/3/library/logging.html" target="_blank">Python logging package&lt;/a> for logging service.&lt;/p></description></item><item><title>print message not shown in nohup.out?</title><link>https://jdhao.github.io/2021/03/16/std_stream_buffering_in_python/</link><pubDate>Tue, 16 Mar 2021 22:54:16 +0800</pubDate><guid>https://jdhao.github.io/2021/03/16/std_stream_buffering_in_python/</guid><description>&lt;p>When starting a long-running Python program,
I often run it under &lt;a href="https://en.wikipedia.org/wiki/Nohup" target="_blank">nohup&lt;/a> so I can redirect all the output to &lt;code>nohup.out&lt;/code> for easier inspection.
I use &lt;code>nohup python test.py&amp;amp;&lt;/code> to run the process in the background.
Then I can run &lt;code>tail -f nohup.out&lt;/code> to monitor the output message from this program.&lt;/p></description></item><item><title>Why is Wrong Stacktrace Printed for My Code?</title><link>https://jdhao.github.io/2021/03/13/python_wrong_stack_printed/</link><pubDate>Sat, 13 Mar 2021 21:02:47 +0800</pubDate><guid>https://jdhao.github.io/2021/03/13/python_wrong_stack_printed/</guid><description>&lt;p>The other day, when I was updating the source code with the project running, I
noticed that the exception stack trace printed is not right, i.e., the printed
error line is actually not the line that is triggering the exception.&lt;/p></description></item><item><title>How to Get or Set Clipboard Text in Python</title><link>https://jdhao.github.io/2021/02/03/get_or_set_system_clipboard_python/</link><pubDate>Wed, 03 Feb 2021 23:02:12 +0800</pubDate><guid>https://jdhao.github.io/2021/02/03/get_or_set_system_clipboard_python/</guid><description>&lt;p>There are several Python packages by which we can get and set the system
clipboard.&lt;/p></description></item><item><title>Anaconda Python 和 pip 国内源/镜像</title><link>https://jdhao.github.io/2021/01/17/china_source_for_python/</link><pubDate>Sun, 17 Jan 2021 21:32:39 +0800</pubDate><guid>https://jdhao.github.io/2021/01/17/china_source_for_python/</guid><description>&lt;p>使用国外的源下载 Python 发行版和各种 Python 库，速度实在是太慢了😭😠，国内的源速度会快很多，权宜之计。&lt;/p></description></item><item><title>Using Concurrent.futures in Python</title><link>https://jdhao.github.io/2020/12/29/python_concurrent_futures/</link><pubDate>Tue, 29 Dec 2020 23:32:08 +0800</pubDate><guid>https://jdhao.github.io/2020/12/29/python_concurrent_futures/</guid><description>&lt;p>My notes on using &lt;a href="https://docs.python.org/3/library/concurrent.futures.html" target="_blank">&lt;code>concurrent.futures&lt;/code>&lt;/a> in Python.&lt;/p></description></item><item><title>The Correct Way to Create List of Empty List in Python</title><link>https://jdhao.github.io/2020/11/22/python_list_of_empty_list_pitfall/</link><pubDate>Sun, 22 Nov 2020 14:57:00 +0800</pubDate><guid>https://jdhao.github.io/2020/11/22/python_list_of_empty_list_pitfall/</guid><description>&lt;p>TL;DR: do not use list multiplication to initialize an empty list of list, or
you will end up wasting hours debugging your program.&lt;/p></description></item><item><title>Pillow/PIL 缩放索引图像时的一个问题</title><link>https://jdhao.github.io/2020/11/18/pillow_image_resize_pitfall/</link><pubDate>Wed, 18 Nov 2020 23:38:02 +0800</pubDate><guid>https://jdhao.github.io/2020/11/18/pillow_image_resize_pitfall/</guid><description>&lt;p>今天遇到了&lt;a href="https://www.v2ex.com/t/726518" target="_blank">一个有趣的问题&lt;/a>，有人在 v2ex 上说自己的图片，经过 &lt;a href="https://python-pillow.org/" target="_blank">PIL&lt;/a> 缩放到 800x600 以后，非常模糊，有什么办法可以解决。&lt;/p></description></item><item><title>Notes on Using Python Regex Package</title><link>https://jdhao.github.io/2020/11/09/python_regex_notes/</link><pubDate>Mon, 09 Nov 2020 22:16:22 +0800</pubDate><guid>https://jdhao.github.io/2020/11/09/python_regex_notes/</guid><description>&lt;p>Some notes on using regular expressions in Python.&lt;/p></description></item><item><title>Profiling Python Code with line_profiler</title><link>https://jdhao.github.io/2020/11/06/profile_python_line_profiler/</link><pubDate>Fri, 06 Nov 2020 01:03:18 +0800</pubDate><guid>https://jdhao.github.io/2020/11/06/profile_python_line_profiler/</guid><description>&lt;p>To profile Python code line by line, we can use &lt;a href="https://github.com/pyutils/line_profiler" target="_blank">line_profiler&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>Tqdm Issues and Tips</title><link>https://jdhao.github.io/2020/09/05/tqdm_tips/</link><pubDate>Sat, 05 Sep 2020 00:23:28 +0800</pubDate><guid>https://jdhao.github.io/2020/09/05/tqdm_tips/</guid><description>&lt;p>&lt;a href="https://github.com/tqdm/tqdm" target="_blank">Tqdm&lt;/a> is a popular package to show a progress
bar. Here are a few tips when using tqdm.&lt;/p></description></item><item><title>Measuring Code Running Time with contextmanager</title><link>https://jdhao.github.io/2020/08/18/context_manager_for_measuring_runtime/</link><pubDate>Tue, 18 Aug 2020 22:15:17 +0800</pubDate><guid>https://jdhao.github.io/2020/08/18/context_manager_for_measuring_runtime/</guid><description>&lt;p>In Python, context manager is a great way to handle the closing of resources. It
makes sure that resources are correctly closed after their use.&lt;/p></description></item><item><title>Create Outline Text in Python with Pillow</title><link>https://jdhao.github.io/2020/08/18/pillow_create_text_outline/</link><pubDate>Tue, 18 Aug 2020 22:12:11 +0800</pubDate><guid>https://jdhao.github.io/2020/08/18/pillow_create_text_outline/</guid><description>&lt;details>
&lt;summary>&lt;font size="2" color="red">update log&lt;/font>&lt;/summary>
&lt;ul>
&lt;li>&lt;font color="blue">2022-04-12: add warning about dangers of omitting stroke_fill parameter.&lt;/font>&lt;/li>
&lt;/ul>
&lt;/details>
&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20200818221311.png" width="400">
&lt;/p>
&lt;p>Sometimes, we may want to add outline color to text strokes with Pillow.
Prior to version 6.2.0, we can not do this in Pillow.
Fortunately, starting from version 6.2.0, pillow supports text outlines natively in its &lt;a href="https://pillow.readthedocs.io/en/stable/reference/ImageDraw.html#PIL.ImageDraw.ImageDraw.text" target="_blank">&lt;code>ImageDraw.text()&lt;/code>&lt;/a> method.&lt;/p></description></item><item><title>pip bad interpreter issue</title><link>https://jdhao.github.io/2020/07/29/pip_bad_interpreter/</link><pubDate>Wed, 29 Jul 2020 23:23:45 +0800</pubDate><guid>https://jdhao.github.io/2020/07/29/pip_bad_interpreter/</guid><description>&lt;p>I am using pip installed via &lt;a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank">minconda&lt;/a>. I installed it
under &lt;code>~/miniconda3&lt;/code> and then move the installation directory to
&lt;code>~/tools/miniconda3&lt;/code>. After that, I changed the &lt;code>PATH&lt;/code> accordingly. However,
when I use pip, I am seeing the following error:&lt;/p></description></item><item><title>Using Multiprocessing in Python</title><link>https://jdhao.github.io/2020/07/27/python_multiprocessing/</link><pubDate>Mon, 27 Jul 2020 23:58:56 +0800</pubDate><guid>https://jdhao.github.io/2020/07/27/python_multiprocessing/</guid><description>&lt;p>One way to achieve parallelism is to use multi-processing, where we can
execute tasks in different cores of the CPU to reduce the total processing
time. Python provides the &lt;a href="https://docs.python.org/3/library/multiprocessing.html" target="_blank">multiprocessing&lt;/a> package to facilitate this.&lt;/p>
&lt;p>This post summarizes some of the questions I have when I learn to use
multiprocessing in Python.&lt;/p></description></item><item><title>Note on Using requests package</title><link>https://jdhao.github.io/2020/07/09/requests_notes/</link><pubDate>Thu, 09 Jul 2020 23:30:14 +0800</pubDate><guid>https://jdhao.github.io/2020/07/09/requests_notes/</guid><description>How to check request header and body? # When making requests, we may want to see exactly what are being requested. With requests, it is easy do access the request header and request body:
import requests url = &amp;#34;http://httpbin.org/post&amp;#34; payload = {&amp;#34;apple&amp;#34;: 10, &amp;#34;pear&amp;#34;: [20, 30], &amp;#34;img&amp;#34;: &amp;#34;http://example.com/demo.jpg&amp;#34;} r = requests.post(url, json=payload) print(f&amp;#34;request headers: {r.request.headers}&amp;#34;) print(f&amp;#34;request body: {r.request.body}&amp;#34;) A sample output is:
request headers: {&amp;#39;User-Agent&amp;#39;: &amp;#39;python-requests/2.19.1&amp;#39;, &amp;#39;Accept-Encoding&amp;#39;: &amp;#39;gzip, deflate&amp;#39;, &amp;#39;Accept&amp;#39;: &amp;#39;*/*&amp;#39;, &amp;#39;Connection&amp;#39;: &amp;#39;keep-alive&amp;#39;, &amp;#39;Content-Length&amp;#39;: &amp;#39;69&amp;#39;, &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;} request body: b&amp;#39;{&amp;#34;apple&amp;#34;: 10, &amp;#34;pear&amp;#34;: [20, 30], &amp;#34;img&amp;#34;: &amp;#34;http://example.</description></item><item><title>uWSGI Install and Use Issues</title><link>https://jdhao.github.io/2020/07/02/uwsgi_install_use_issue/</link><pubDate>Thu, 02 Jul 2020 01:02:17 +0800</pubDate><guid>https://jdhao.github.io/2020/07/02/uwsgi_install_use_issue/</guid><description>&lt;p>My notes on several issues when installing and running &lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/" target="_blank">uWSGI&lt;/a>.&lt;/p></description></item><item><title>Downloading Images Faster with requests Sessions</title><link>https://jdhao.github.io/2020/06/21/faster_im_download_with_requests/</link><pubDate>Sun, 21 Jun 2020 22:13:05 +0800</pubDate><guid>https://jdhao.github.io/2020/06/21/faster_im_download_with_requests/</guid><description>&lt;p>In my &lt;a href="https://jdhao.github.io/2020/06/17/download_image_from_url_python/" target="_blank">previous post&lt;/a>,
I write about how to download an image from URL using &lt;a href="https://github.com/psf/requests" target="_blank">requests&lt;/a>.
In this post, I want to share ways to make the download speed faster.&lt;/p></description></item><item><title>Duplicate Logging Messages in Python</title><link>https://jdhao.github.io/2020/06/20/python_duplicate_logging_messages/</link><pubDate>Sat, 20 Jun 2020 00:45:12 +0800</pubDate><guid>https://jdhao.github.io/2020/06/20/python_duplicate_logging_messages/</guid><description>&lt;p>When I am working on a project, I find that the same message is printed twice.
The following minimal code can reproduce this issue:&lt;/p></description></item><item><title>How to Download Image from URL using Python</title><link>https://jdhao.github.io/2020/06/17/download_image_from_url_python/</link><pubDate>Wed, 17 Jun 2020 09:19:30 +0800</pubDate><guid>https://jdhao.github.io/2020/06/17/download_image_from_url_python/</guid><description>&lt;p>Recently, I want to download some images using Python.
This is what I&amp;rsquo;ve learned after the survey.&lt;/p></description></item><item><title>Serving Flask Applications with uWSGI</title><link>https://jdhao.github.io/2020/06/13/flask_serving_via_wsgi_server/</link><pubDate>Sat, 13 Jun 2020 21:44:44 +0800</pubDate><guid>https://jdhao.github.io/2020/06/13/flask_serving_via_wsgi_server/</guid><description>&lt;p>In my &lt;a href="https://jdhao.github.io/2020/04/06/build_webapi_with_flask_s1/" target="_blank">older post&lt;/a>, I have shared how to run the built-in development server to serve Flask web service.
For production, we need to use more powerful web servers.
Flask complies to the &lt;a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface" target="_blank">WSGI&lt;/a> specification and can work with any web server that conforms to WSGI.&lt;/p>
&lt;p>In this post, I want share how to run Flask applications using &lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/" target="_blank">uWSGI&lt;/a> &amp;mdash; a popular WSGI-compliant server.&lt;/p></description></item><item><title>Virtual Environment Management with Conda</title><link>https://jdhao.github.io/2020/06/11/conda_env_management/</link><pubDate>Thu, 11 Jun 2020 00:10:43 +0800</pubDate><guid>https://jdhao.github.io/2020/06/11/conda_env_management/</guid><description>&lt;p>&lt;a href="https://docs.conda.io/projects/conda/en/latest/" target="_blank">Conda&lt;/a> is the default package
and environment management tool shipped with
&lt;a href="https://www.anaconda.com/products/individual" target="_blank">Anaconda&lt;/a>.&lt;/p>
&lt;p>This post logs my cheatsheet and notes for working with virtual environments
with conda.&lt;/p></description></item><item><title>How to Use Asyncio with Flask Applications</title><link>https://jdhao.github.io/2020/06/07/asyncio_inside_flask/</link><pubDate>Sun, 07 Jun 2020 20:02:18 +0800</pubDate><guid>https://jdhao.github.io/2020/06/07/asyncio_inside_flask/</guid><description>&lt;p>I was using &lt;a href="https://docs.python.org/3/library/asyncio.html" target="_blank">asyncio&lt;/a> inside a
view function for Flask to run some asynchronous functions and met an error.&lt;/p></description></item><item><title>How to Use Unified Logging Config Across Your Project</title><link>https://jdhao.github.io/2020/04/24/python_logging_for_multiple_modules/</link><pubDate>Fri, 24 Apr 2020 01:12:43 +0800</pubDate><guid>https://jdhao.github.io/2020/04/24/python_logging_for_multiple_modules/</guid><description>&lt;p>When we are working on a project, we often need to log some message for easier debugging.
How do we configure logging once and use it across the project?&lt;/p></description></item><item><title>Get Current Time with Time Zone Info in Python</title><link>https://jdhao.github.io/2020/04/17/python_datetime_timezone/</link><pubDate>Fri, 17 Apr 2020 21:54:48 +0800</pubDate><guid>https://jdhao.github.io/2020/04/17/python_datetime_timezone/</guid><description>&lt;p>I am trying to generate a custom time format using the Python &lt;code>datetime&lt;/code>
package. My original code is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">datetime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;%Y-%m-&lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2"> %H:%M:%S%z&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Build Web API with Flask --- Work with JSON-like Dict</title><link>https://jdhao.github.io/2020/04/13/build_webapi_with_flask_s3/</link><pubDate>Mon, 13 Apr 2020 22:29:23 +0800</pubDate><guid>https://jdhao.github.io/2020/04/13/build_webapi_with_flask_s3/</guid><description>&lt;p>This is a simple post about how to send JSON-like Dict data to a Flask server
via &lt;a href="https://requests.readthedocs.io/en/master/" target="_blank">requests&lt;/a> package.&lt;/p></description></item><item><title>Build Web API with Flask -- Post and Receive Image</title><link>https://jdhao.github.io/2020/04/12/build_webapi_with_flask_s2/</link><pubDate>Sun, 12 Apr 2020 20:11:52 +0800</pubDate><guid>https://jdhao.github.io/2020/04/12/build_webapi_with_flask_s2/</guid><description>&lt;p>In this post, I want to write about how to build a simple image processing web
API that returns the size of an image. The topics include how to build this web
API with Flask and how to post image to this web API and get response.&lt;/p></description></item><item><title>Build A Web API Service Using Flask -- The Basics</title><link>https://jdhao.github.io/2020/04/06/build_webapi_with_flask_s1/</link><pubDate>Mon, 06 Apr 2020 22:05:07 +0800</pubDate><guid>https://jdhao.github.io/2020/04/06/build_webapi_with_flask_s1/</guid><description>&lt;p>Web API is a kind of web application. Simply put, web APIs are built for other
applications to get info from the web server. For Python,
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/" target="_blank">Flask&lt;/a> can be used to build web
applications. In this post, I want to share how to build web APIs with Flask.&lt;/p></description></item><item><title>Conversion between base64 and OpenCV or PIL Image</title><link>https://jdhao.github.io/2020/03/17/base64_opencv_pil_image_conversion/</link><pubDate>Tue, 17 Mar 2020 23:08:32 +0800</pubDate><guid>https://jdhao.github.io/2020/03/17/base64_opencv_pil_image_conversion/</guid><description>&lt;p>When we are building web services using Python, we often send or receive images
in &lt;a href="https://docs.python.org/3/library/base64.html" target="_blank">base64&lt;/a> encoded format.
However, when we are doing image processing tasks, we need to use PIL or
OpenCV. In this post, I will share how to convert between OpenCV or PIL image
and base64 encoded image.&lt;/p></description></item><item><title>解决 Matplotlib 使用中文乱码问题</title><link>https://jdhao.github.io/2020/02/22/guide-on-how-to-use-chinese-with-matplotlib_zh/</link><pubDate>Sat, 22 Feb 2020 11:41:09 +0800</pubDate><guid>https://jdhao.github.io/2020/02/22/guide-on-how-to-use-chinese-with-matplotlib_zh/</guid><description>&lt;p>注：这是一篇&lt;a href="https://jdhao.github.io/2017/05/13/guide-on-how-to-use-chinese-with-matplotlib/" target="_blank">旧文&lt;/a>的中文翻译版本。&lt;/p>
&lt;p>前不久，我在使用 Matplotlib 画图的时候，发现一些 Unicode 字符(例如，汉字) 无法正常显示：在生成的图片中，汉字是乱码的，显示为一个方框。经过大量的查找和阅读，我终于明白了如何在使用 Matplotlib 时，正确渲染 Unicode 字符&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p></description></item><item><title>Pylint: command not found?</title><link>https://jdhao.github.io/2019/11/28/pylint_command_not_found/</link><pubDate>Thu, 28 Nov 2019 01:21:54 +0800</pubDate><guid>https://jdhao.github.io/2019/11/28/pylint_command_not_found/</guid><description>&lt;p>The system I am currently using has Anaconda pre-installed by root under system
locations.&lt;/p></description></item><item><title>How to sort a list of tuple or list in Python -- lambda or itemgetter?</title><link>https://jdhao.github.io/2019/11/06/python_sort_list_of_list/</link><pubDate>Wed, 06 Nov 2019 22:43:59 +0800</pubDate><guid>https://jdhao.github.io/2019/11/06/python_sort_list_of_list/</guid><description>&lt;p>In Python, when we want to sort a list of tuples or lists, we may want to sort
it based on certain element in each sub-list, for example, sort the list based
on the first element in each sub-list.&lt;/p></description></item><item><title>Convert Python Script to Exe on Windows with Pyinstaller</title><link>https://jdhao.github.io/2019/10/14/python_script_to_exe/</link><pubDate>Mon, 14 Oct 2019 21:46:55 +0800</pubDate><guid>https://jdhao.github.io/2019/10/14/python_script_to_exe/</guid><description>&lt;h1 class="relative group">Introduction
&lt;div id="introduction" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#introduction" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;p>I have a use case where I want to convert my Python script to standalone
executable so that I do not need to type &lt;code>python&lt;/code> before it to run the script.
On Linux, it is easy to achieve with the help of
&lt;a href="https://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts-and-what-form-should-it-take" target="_blank">shebang&lt;/a>.
However, on Windows, it does not work. Then I thought I might convert the
script to Windows executable.&lt;/p></description></item><item><title>How to Read and Write Images with Unicode Paths in OpenCV</title><link>https://jdhao.github.io/2019/09/11/opencv_unicode_image_path/</link><pubDate>Wed, 11 Sep 2019 00:23:41 +0800</pubDate><guid>https://jdhao.github.io/2019/09/11/opencv_unicode_image_path/</guid><description>&lt;p>The other day, when I was using OpenCV to read some images and print the image
shape, I got an error:&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;NoneType&amp;rsquo; object has no attribute &amp;lsquo;shape&amp;rsquo;.&lt;/p>
&lt;/blockquote>
&lt;p>I was confused and do not know why since the image path is valid. It tooks me a
while to understand the cause.&lt;/p></description></item><item><title>JPEG Image Quality in PIL</title><link>https://jdhao.github.io/2019/07/20/pil_jpeg_image_quality/</link><pubDate>Sat, 20 Jul 2019 21:19:39 +0800</pubDate><guid>https://jdhao.github.io/2019/07/20/pil_jpeg_image_quality/</guid><description>&lt;h1 class="relative group">Introduction
&lt;div id="introduction" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#introduction" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;p>The other day, I was haunted by a bug and found that it was an issue with the
image quality saved by &lt;a href="https://pillow.readthedocs.io/en/stable/" target="_blank">Pillow&lt;/a> after
spending a few hours debugging the code.&lt;/p></description></item><item><title>Convert PIL or OpenCV Image to Bytes without Saving to Disk</title><link>https://jdhao.github.io/2019/07/06/python_opencv_pil_image_to_bytes/</link><pubDate>Sat, 06 Jul 2019 22:18:22 +0800</pubDate><guid>https://jdhao.github.io/2019/07/06/python_opencv_pil_image_to_bytes/</guid><description>&lt;h1 class="relative group">Introduction
&lt;div id="introduction" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#introduction" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;p>Sometimes, we may want an in-memory jpg or png image that is represented as
binary data. But often, what we have got is image in OpenCV (Numpy ndarray) or
PIL Image format. In this post, I will share how to convert Numpy image or PIL
Image object to binary data without saving the underlying image to disk.&lt;/p></description></item><item><title>Unintuitive Behaviour of Case Sensitivity in Python glob</title><link>https://jdhao.github.io/2019/06/24/python_glob_case_sensitivity/</link><pubDate>Mon, 24 Jun 2019 17:19:33 +0800</pubDate><guid>https://jdhao.github.io/2019/06/24/python_glob_case_sensitivity/</guid><description>&lt;p>tl;dr: &lt;code>glob.glob()&lt;/code> is case sensitive in Linux, but case insensitive in Windows.&lt;/p>
&lt;p>Recently, I was bitten by the unintuitive behaviour of &lt;code>glob.glob()&lt;/code>.
I think it would be beneficial to write down what I have found.&lt;/p></description></item><item><title>Manipulating Images with Alpha Channels in Pillow</title><link>https://jdhao.github.io/2019/03/07/pillow_image_alpha_channel/</link><pubDate>Thu, 07 Mar 2019 16:21:57 +0800</pubDate><guid>https://jdhao.github.io/2019/03/07/pillow_image_alpha_channel/</guid><description>&lt;p>In image processing, &lt;a href="https://www.makeuseof.com/tag/alpha-channel-images-mean/" target="_blank">alpha channel&lt;/a> is usually used to control the transparency of an image.
In itself, the alpha channel is just a gray level image&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
In this post, I want to talk about how to add an alpha channel to RGB image and show it using the Pillow package.&lt;/p></description></item><item><title>Cropping Rotated Rectangles from Image with OpenCV</title><link>https://jdhao.github.io/2019/02/23/crop_rotated_rectangle_opencv/</link><pubDate>Sat, 23 Feb 2019 01:14:26 +0800</pubDate><guid>https://jdhao.github.io/2019/02/23/crop_rotated_rectangle_opencv/</guid><description>&lt;p>In computer vision tasks, we need to crop a rotated rectangle from the original
image sometimes, for example, to crop a rotated text box. In this post, I would
like to introduce how to do this in OpenCV.&lt;/p></description></item><item><title>How to Debug Python Code in Terminal</title><link>https://jdhao.github.io/2019/01/16/debug_python_in_terminal/</link><pubDate>Wed, 16 Jan 2019 10:21:12 +0800</pubDate><guid>https://jdhao.github.io/2019/01/16/debug_python_in_terminal/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20190116225245.jpg" width="600">
&lt;/p></description></item><item><title>Two Issues Related to ImageFont Module in PIL</title><link>https://jdhao.github.io/2018/12/04/two_issues_related_to_imagefont_pillow/</link><pubDate>Tue, 04 Dec 2018 22:48:00 +0800</pubDate><guid>https://jdhao.github.io/2018/12/04/two_issues_related_to_imagefont_pillow/</guid><description>&lt;p>In this post, I want to write about two issues related to the
&lt;a href="https://pillow.readthedocs.io/en/5.1.x/reference/ImageFont.html" target="_blank">ImageFont&lt;/a>
module in the &lt;a href="https://github.com/python-pillow/Pillow" target="_blank">PIL&lt;/a> package.&lt;/p></description></item><item><title>Reading and Writing Text Files on Windows</title><link>https://jdhao.github.io/2018/12/03/text_file_read_write_on_windows/</link><pubDate>Mon, 03 Dec 2018 13:06:00 +0800</pubDate><guid>https://jdhao.github.io/2018/12/03/text_file_read_write_on_windows/</guid><description>&lt;p>If you are using Python 3 on Windows, you may have seen a Unicode decoding
error when opening files in UTF-8 format:&lt;/p>
&lt;blockquote>
&lt;p>UnicodeDecodeError: &amp;lsquo;gbk&amp;rsquo; codec can&amp;rsquo;t decode byte 0xaf in position 5: illegal multibyte sequence&lt;/p>
&lt;/blockquote>
&lt;p>If you read the same file on Linux or macOS, you will find that this file can
be opened without any error. Why is there a difference? It has something to do
with the default encoding Python chooses to use on different platforms.&lt;/p></description></item><item><title>A Simple Guide on How to Use the Python Logging Module</title><link>https://jdhao.github.io/2018/10/12/python_logging_module/</link><pubDate>Fri, 12 Oct 2018 22:13:00 +0800</pubDate><guid>https://jdhao.github.io/2018/10/12/python_logging_module/</guid><description>&lt;p>In the past, I use plain &lt;code>print()&lt;/code> to display some statistics during training process of my models.
However, it is not convenient to save the statistics in a file for later inspection.
Once the program is finished, we do not have an overview of the training process.
I am aware that there are packages such as &lt;a href="https://github.com/lanpa/tensorboardX" target="_blank">tensorboardX&lt;/a> and &lt;a href="https://github.com/facebookresearch/visdom" target="_blank">visdom&lt;/a>,
which are specifically designed for inspecting the various statistics during training.
Right now, I would rather keep the program plain simple and usable.
So I decided to give &lt;a href="https://docs.python.org/3/library/logging.html" target="_blank">Python logging package&lt;/a> a try.&lt;/p></description></item><item><title>Set up the Default Value for Boolean Option in Argparse</title><link>https://jdhao.github.io/2018/10/11/python_argparse_set_boolean_params/</link><pubDate>Thu, 11 Oct 2018 16:33:00 +0800</pubDate><guid>https://jdhao.github.io/2018/10/11/python_argparse_set_boolean_params/</guid><description>&lt;p>TL;DR&lt;/p>
&lt;p>If you want to set a parameter&amp;rsquo;s default value to &lt;code>True&lt;/code> using argparse, use&lt;/p>
&lt;pre tabindex="0">&lt;code>parser.add_argument(&amp;#39;--param&amp;#39;, action=&amp;#39;store_false&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>Otherwise, use&lt;/p>
&lt;pre tabindex="0">&lt;code>parser.add_argument(&amp;#39;--param&amp;#39;, action=&amp;#39;store_true&amp;#39;)
&lt;/code>&lt;/pre></description></item><item><title>How to Change Intersection Point of X and Y Axis in Matplotlib</title><link>https://jdhao.github.io/2018/05/21/matplotlib-change-axis-intersection-point/</link><pubDate>Mon, 21 May 2018 11:02:09 +0800</pubDate><guid>https://jdhao.github.io/2018/05/21/matplotlib-change-axis-intersection-point/</guid><description>In this post, I will share how to position the intersection of x and y axis at a specific point using Matplotlib.
The spines # In order to re-position x and y axis, we need to understand an important concept in Matplotlib &amp;mdash;spines. According to Matplotlib documentation:
Spines are the lines connecting the axis tick marks and noting the boundaries of the data area. They can be placed at arbitrary positions.</description></item><item><title>How to Read and Write CSV Files in Python</title><link>https://jdhao.github.io/2018/05/13/read-write-csv-file-with-header/</link><pubDate>Sun, 13 May 2018 21:24:42 +0800</pubDate><guid>https://jdhao.github.io/2018/05/13/read-write-csv-file-with-header/</guid><description>update log 2022-09-30: change order of read and write section; other small fixes.
In this post, I will share the most convenient way to read and write CSV files (with or w/o headers) in Python.
Read CSV files # Use the builtin CSV module # Python has a built-in CSV module that deals with CSV files. CSV module provides a CSV reader, which we can use to read CSV files.</description></item><item><title>How to Plot Unicode Characters with Matplotlib</title><link>https://jdhao.github.io/2018/04/08/matplotlib-unicode-character/</link><pubDate>Sun, 08 Apr 2018 22:33:46 +0800</pubDate><guid>https://jdhao.github.io/2018/04/08/matplotlib-unicode-character/</guid><description>&lt;p>This is a post which follows up my previous post on &lt;a href="https://jdhao.github.io/2017/05/13/guide-on-how-to-use-chinese-with-matplotlib/" target="_blank">how to use Chinese
characters with
Matplotlib&lt;/a>.&lt;/p></description></item><item><title>How To Put Legend outside of Axes Properly in Matplotlib?</title><link>https://jdhao.github.io/2018/01/23/matplotlib-legend-outside-of-axes/</link><pubDate>Tue, 23 Jan 2018 14:51:45 +0800</pubDate><guid>https://jdhao.github.io/2018/01/23/matplotlib-legend-outside-of-axes/</guid><description>&lt;p>When we want to put legend somewhere in a figure using Matplotlib, most of the
time, the option &lt;code>loc='best'&lt;/code> will produce the desired results. However,
sometimes, we may want to have finer control over where the legend should be in
the image. For example, we may want to put the legend outside of the axes,
which is impossible using &lt;code>loc='best'&lt;/code>.&lt;/p></description></item><item><title>Working with Fonts in Matplotlib</title><link>https://jdhao.github.io/2018/01/18/mpl-plotting-notes-201801/</link><pubDate>Thu, 18 Jan 2018 21:13:00 +0800</pubDate><guid>https://jdhao.github.io/2018/01/18/mpl-plotting-notes-201801/</guid><description>&lt;p>This post continues my &lt;a href="https://jdhao.github.io/2017/11/16/matplotlib-plotting-notes/" target="_blank">previous post&lt;/a>
on various tips and tricks collected during the process of using Matplotlib.&lt;/p>
&lt;p>&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/18-1-18/39303776.jpg"
title="Different math symbols produced by Matplotlib and LaTeX"
style="float: middle;">&lt;/p></description></item><item><title>Matplotlib Plotting Notes -- Series 1</title><link>https://jdhao.github.io/2017/11/16/matplotlib-plotting-notes/</link><pubDate>Thu, 16 Nov 2017 21:41:00 +0800</pubDate><guid>https://jdhao.github.io/2017/11/16/matplotlib-plotting-notes/</guid><description>&lt;p>This post records my collected notes on various tricks in using Matplotlib.&lt;/p></description></item><item><title>How to Resize, Pad Image to Square Shape and Keep Its Aspect Ratio in Python</title><link>https://jdhao.github.io/2017/11/06/resize-image-to-square-with-padding/</link><pubDate>Mon, 06 Nov 2017 10:00:45 +0800</pubDate><guid>https://jdhao.github.io/2017/11/06/resize-image-to-square-with-padding/</guid><description>&lt;p>When we are using convolutional neural networks, most of the time, we need to
fix the input image size to feed it to the network. The usual practice is to
resize the input image to the given size (the image aspect ratio is no longer
kept) and then crop a fixed size patch randomly from the resized image. This
practice may work well for image classification where fine details may not be
necessary. But for Image retrieval, we want to keep the image aspect ration
unchanged. In this post, I will summarize ways to resize an image to square
shape with padding and keep its aspect ratio.&lt;/p></description></item><item><title>How to Plot Only One Colorbar for Multiple Plot Using Matplotlib</title><link>https://jdhao.github.io/2017/06/11/mpl_multiplot_one_colorbar/</link><pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate><guid>https://jdhao.github.io/2017/06/11/mpl_multiplot_one_colorbar/</guid><description>&lt;p>In some situations, we have several subplots and we want to use only one
colorbar for all the subplots. How to do this in Matplotlib?&lt;/p></description></item><item><title>How to Set the Aspect Ratio of Image (or Axes) in Matplotlib?</title><link>https://jdhao.github.io/2017/06/03/change-aspect-ratio-in-mpl/</link><pubDate>Sat, 03 Jun 2017 00:58:00 +0800</pubDate><guid>https://jdhao.github.io/2017/06/03/change-aspect-ratio-in-mpl/</guid><description>&lt;p>In Matplotlib, &lt;a
href="https://matplotlib.org/api/axes_api.html">&lt;code>Axes&lt;/code>&lt;/a> is
the primary place where we put plot elements, such as lines, texts and
legends. However, for a long time, I failed to grasp the meaning of
aspect ratio in Matplotlib, thus was constantly frustrated by the
behavior of Maplotlib every time I attempted to change the aspect ratio
of a plot. This post is the result of my attempt to understand it and my
findings. Hope it can help you too.&lt;/p></description></item><item><title>A Guide on Using Unicode Characters in Matplotlib</title><link>https://jdhao.github.io/2017/05/13/guide-on-how-to-use-chinese-with-matplotlib/</link><pubDate>Sat, 13 May 2017 21:36:26 +0800</pubDate><guid>https://jdhao.github.io/2017/05/13/guide-on-how-to-use-chinese-with-matplotlib/</guid><description>&lt;p>A few days ago, I found that Matplotlib can not show some Unicode characters
(some Chinese characters) using its default settings. In the rendered output
image, Chinese characters are shown as blank boxes. After reading a lot of
posts on this issue, I am finally clear about how to use Unicode characters
properly in Matplotlib.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p></description></item><item><title>Commonly-used Methods in Python OS Package</title><link>https://jdhao.github.io/2016/03/17/common_methon_in_python_os_module/</link><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><guid>https://jdhao.github.io/2016/03/17/common_methon_in_python_os_module/</guid><description>&lt;p>In this post I summarize the commonly-used methods in Python os package.&lt;/p></description></item><item><title>Windows 系统下 Python 以及 Pip 的安装和使用</title><link>https://jdhao.github.io/2015/10/21/python-pip-install/</link><pubDate>Wed, 21 Oct 2015 14:29:00 +0800</pubDate><guid>https://jdhao.github.io/2015/10/21/python-pip-install/</guid><description>&lt;p>本文主要介绍在 Windows 系统下，如何安装 Python 和 Pip, 以及 Pip 的简单使用。&lt;/p></description></item></channel></rss>