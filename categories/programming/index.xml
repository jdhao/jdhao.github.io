<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on jdhao's digital space</title><link>https://jdhao.github.io/categories/programming/</link><description>Recent content in Programming on jdhao's digital space</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2017 - 2025 ❤️ jdhao</copyright><lastBuildDate>Thu, 28 Apr 2022 21:45:01 +0800</lastBuildDate><atom:link href="https://jdhao.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Calculate Square Root without Using sqrt()?</title><link>https://jdhao.github.io/2022/04/28/sqrt_without_using_builtin_sqrt/</link><pubDate>Thu, 28 Apr 2022 21:45:01 +0800</pubDate><guid>https://jdhao.github.io/2022/04/28/sqrt_without_using_builtin_sqrt/</guid><description>&lt;p>I saw an interesting question that how to get square root of x
without using builtin function from your language. There are different
ways to approach this problem.&lt;/p></description></item><item><title>快排(quick sort) C++ 实现</title><link>https://jdhao.github.io/2021/07/10/quick_sort_impl/</link><pubDate>Sat, 10 Jul 2021 12:19:38 +0800</pubDate><guid>https://jdhao.github.io/2021/07/10/quick_sort_impl/</guid><description>&lt;p>快排是一种快速排序算法，原理是从数组中选择一个 pivot，数组中小于等于 pivot 的元素放到左边，大于 pivot 的元素放到右边。然后对左边和右边数组分别递归进行快速排序，最后整个数组就成为排序好的数组。&lt;/p></description></item><item><title>Static and Dynamic Linkage in C++</title><link>https://jdhao.github.io/2021/07/04/static_and_dynamic_linking_cpp/</link><pubDate>Sun, 04 Jul 2021 01:02:33 +0800</pubDate><guid>https://jdhao.github.io/2021/07/04/static_and_dynamic_linking_cpp/</guid><description>&lt;p>In C++, we can build a library either statically or dynamically. In this post,
I want to summarize how to build a static and a shared/dynamic library&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>Pretty Output Format in C++</title><link>https://jdhao.github.io/2021/07/04/pretty_fmt_in_cpp/</link><pubDate>Sun, 04 Jul 2021 00:26:30 +0800</pubDate><guid>https://jdhao.github.io/2021/07/04/pretty_fmt_in_cpp/</guid><description>&lt;p>Although &lt;code>std::cout&lt;/code> in C++ is powerful, it lacks the ease of use of &lt;a href="https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method" target="_blank">format
string&lt;/a> in Python. Fortunately, the 3rd party package &lt;a href="https://github.com/fmtlib/fmt" target="_blank">fmt&lt;/a>
provides a similar feature for C++.&lt;/p></description></item><item><title>Build C++ Project with CMake -- A Simple Example</title><link>https://jdhao.github.io/2020/12/12/build_opencv_project_with_cmake/</link><pubDate>Sat, 12 Dec 2020 11:07:21 +0800</pubDate><guid>https://jdhao.github.io/2020/12/12/build_opencv_project_with_cmake/</guid><description>&lt;p>For small projects, people tend to directly invoke the compiler with the
suitable options to build the program. While it is feasible, it is tedious to
type those compilation options and flags. For projects with multiple source
files and header files, it becomes inefficient to build by hand. On Linux,
people may write &lt;a href="http://web.mit.edu/gnu/doc/html/make_2.html" target="_blank">Makefile&lt;/a> and
build with &lt;a href="https://www.gnu.org/software/make/" target="_blank">make&lt;/a>. On Windows, people may
use Visual Studio for writing and build their project.&lt;/p></description></item><item><title>Why Are Some Libraries Linked by Default in GCC?</title><link>https://jdhao.github.io/2020/12/10/gcc_library_link_issue/</link><pubDate>Thu, 10 Dec 2020 23:22:57 +0800</pubDate><guid>https://jdhao.github.io/2020/12/10/gcc_library_link_issue/</guid><description>&lt;p>Different behavior of linkage between Clang and GCC.&lt;/p></description></item><item><title>几道算法问题解答</title><link>https://jdhao.github.io/2017/10/19/mobike-programming-test-20171019/</link><pubDate>Thu, 19 Oct 2017 14:12:30 +0800</pubDate><guid>https://jdhao.github.io/2017/10/19/mobike-programming-test-20171019/</guid><description>&lt;p>记录一下做的几道算法问题的解答。&lt;/p></description></item><item><title>What Is the Correct Way of Loop Through C++ Vector Using Index?</title><link>https://jdhao.github.io/2017/10/07/loop-forward-backward-with-cpp-vector/</link><pubDate>Sat, 07 Oct 2017 23:38:41 +0800</pubDate><guid>https://jdhao.github.io/2017/10/07/loop-forward-backward-with-cpp-vector/</guid><description>&lt;p>It might seem naive to ask how to loop through a C++ vector using index.
However, it is not: even experienced programmer may write buggy code to loop
through a vector.&lt;/p></description></item><item><title>Remainder Operator(%) in C++</title><link>https://jdhao.github.io/2017/10/07/modulo-operator-in-cpp/</link><pubDate>Sat, 07 Oct 2017 21:11:12 +0800</pubDate><guid>https://jdhao.github.io/2017/10/07/modulo-operator-in-cpp/</guid><description>&lt;p>What is value of &lt;code>a&lt;/code> and &lt;code>b&lt;/code> in the following statement according to the rules of C++ 11?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you can not clearly tell the result, then you should update your knowledge
about % operator in C++.&lt;/p></description></item><item><title>堆排序是如何工作的？</title><link>https://jdhao.github.io/2017/10/06/heap-sort-explained/</link><pubDate>Fri, 06 Oct 2017 16:25:03 +0800</pubDate><guid>https://jdhao.github.io/2017/10/06/heap-sort-explained/</guid><description>&lt;p>本文将介绍堆
(heap)的概念，进一步介绍如何把普通数组变成最大堆，并在此基础上进行堆排序。&lt;/p></description></item><item><title>When Does the Stability of Sorting Algorithms Matter?</title><link>https://jdhao.github.io/2017/09/30/sorting-algorithms-stability/</link><pubDate>Sat, 30 Sep 2017 15:34:55 +0800</pubDate><guid>https://jdhao.github.io/2017/09/30/sorting-algorithms-stability/</guid><description>&lt;p>In this post, I will write about the stability of sorting algorithms and why it
is important.&lt;/p></description></item><item><title>小米 2018 校招算法工程师编程之字符串匹配</title><link>https://jdhao.github.io/2017/09/21/xiaomi201818-pattern-match/</link><pubDate>Thu, 21 Sep 2017 22:07:03 +0800</pubDate><guid>https://jdhao.github.io/2017/09/21/xiaomi201818-pattern-match/</guid><description>&lt;p>这是一道小米 2018 校招算法工程师的编程题目，类似与正则表达式匹配，但是该题不能使用 Python，因此需要自己实现这个简单的匹配，题目如下:&lt;/p></description></item><item><title>Some Programming Questions Related to Operations with Big Integers</title><link>https://jdhao.github.io/2017/09/21/big-integer-operations-cpp/</link><pubDate>Thu, 21 Sep 2017 10:23:46 +0800</pubDate><guid>https://jdhao.github.io/2017/09/21/big-integer-operations-cpp/</guid><description>&lt;p>The C++ standard library doesn&amp;rsquo;t support big integer operations such as
addition and multiplication. In this post, I will show how to solve such
problems in C++.&lt;/p></description></item><item><title>Find Longest Subarray Whose Sum Is Divisible by K</title><link>https://jdhao.github.io/2017/09/01/longest-subarray-modulo-k/</link><pubDate>Fri, 01 Sep 2017 00:05:38 +0800</pubDate><guid>https://jdhao.github.io/2017/09/01/longest-subarray-modulo-k/</guid><description>&lt;p>The problem is as follows:&lt;/p>
&lt;blockquote>
&lt;p>Given an array $A$ of length $N$, $A[i] \ge 0$ ( $0 \le i \le N-1$) , and a
number $K$. Find the longest subarray whose sum is divisible by $K$, if there
are no such subarray, return 0;&lt;/p>
&lt;/blockquote></description></item><item><title>从二分搜索实现中的一个 bug 说起</title><link>https://jdhao.github.io/2017/08/27/binary-search-overflow-issue/</link><pubDate>Sun, 27 Aug 2017 22:01:50 +0800</pubDate><guid>https://jdhao.github.io/2017/08/27/binary-search-overflow-issue/</guid><description>&lt;h1 class="relative group">一道二分搜索问题
&lt;div id="%E4%B8%80%E9%81%93%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E4%B8%80%E9%81%93%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;p>下午做了&lt;a href="https://leetcode.com/problems/first-bad-version/description/" target="_blank">一道 Leetcode 的编程题目&lt;/a>，牵扯出了二分搜索实现中需要特别注意的一个问题，题目如下&lt;/p></description></item></channel></rss>